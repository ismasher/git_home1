# -*- coding:utf-8 -*-

import numpy as np
import pandas as pd
import pickle
print("aaa")
import time
from sklearn.metrics import roc_curve, auc
from sklearn.mixture import GMM
import warnings

np.set_printoptions(threshold=np.NaN)
np.set_printoptions(suppress=True)

warnings.filterwarnings("ignore")
DATA_DIR = "D:\\MeetingMinutes\\Data\\test_basemap\\trajectory_classification-master\\data\\"

'''
sao_bento_sspd_matrix = np.load(DATA_DIR + "sao_bento_sspd_matrix.npy")

print(sao_bento_sspd_matrix[0:1000])
#(385881,)
'''

saobento = pd.read_pickle(DATA_DIR + "sao_bento.pkl")
cv_list_SaoBento = pd.read_pickle(DATA_DIR + "\\olddata\\cv_list_SaoBento.pkl")
old_SaoBento = pd.read_pickle(DATA_DIR + "\\olddata\\sao_bento.pkl")
data = pd.read_pickle(DATA_DIR + "data.pkl")
labels_sao_bento = pickle.load(open(DATA_DIR + "sao_bento_traj_labels.pkl", "rb"),  encoding='iso-8859-1')
gmm_cv_models_saobento = pd.read_pickle(DATA_DIR + "\\olddata\\gmm_cv_models_saobento.pkl")
#print(gmm_cv_models_saobento)
gmm_scores_saobento = pd.read_pickle(DATA_DIR + "\\olddata\\gmm_scores_saobento.pkl")
#print(gmm_scores_saobento)

Paired_45 = pd.read_pickle(DATA_DIR + "\\Paired_45.pkl")

print("Paired_45")
print(Paired_45)
#print(saobento.shape)
#print(labels_sao_bento)
#print(old_SaoBento.shape)
#for c in saobento.groupby("id_traj"):
#    print(c[0])
#print(cv_list_SaoBento)

print(len(cv_list_SaoBento[2]))




cv_index_9 = [5990,10171,8222,13686,3175,3621,12554,1343,4290,19371,2585,19126
,728,9647,3797,14719,5714,10293,15070,13497,17575,1772,4913,9015
,1855,15311,5460,9214,8861,15272,8386,6878,19292,3619,10870,14961
,11092,12111,9512,17154,6025,6680,18684,709,4676,13300,14464,11132
,5478,6793,14593,14913,9226,3214,7636,16846,6989,17973,11080,18044
,18100,4599,2646,7128,3828,8804,7728,10999,4999,570,8639,15882
,8041,16993,10980,8094,7258,4061,14197,5128,10806,16378,18412,233
,9154,14475,9030,6730,1991,8724,19079,12248,16050,15768,6135,8704
,5691,7335,2799,6421,7687,14388,8700,17187,12683,3232,11133,12547
,4502,8895,19396,8766,8401,10761,18557,10922,11100,3321,18519,16194
,9753,2612,8338,18959,3201,18378,11847,10851,9824,2768,11566,3108
,201,7721,7131,1337,3888,10106,8745,13105,7680,8467,9021,7910
,14686,18705,13429,3690,15939,1536,5457,8932,12087,10434,9962,13538
,7505,13344,6420,4003,11570,15104,17798,15817,5871,17419,9750,4780
,6772,13921,2872,2984,4843,1204,3579,4132,18353,11657,5180,10114
,17287,6030,294,4062,1244,6101,12760,16591,16557,7805,3493,12647
,8008,7603,9884,6638,6715,3447,13009,15270,14630,2356,0,15941
,2839,302,17142,15243,6873,16887,767,17607,12730,14671,12378,6450
,6732,2361,9440,4345,6932,81,4161,3084,4001,18084,8810,18364
,5040,15490,12109,15769,2164,15662,4050,7150,6684,5473,3809,4125
,5083,3554,15052,3692,13179,19253,9176,17905,4639,8801,17715,17980
,12523,1620,7179,5802,18082,10546,6633,9981,12272,13763,11966,13084
,15873,18756,17730,15945,1405,15112,15589,16893,17399,13767,12733,3535
,3582,12738,12977,13224,6975,3749,17428,17860,15437,9332,16030,10012
,15435,9069,3880,15736,9965,9157,7366,6864,6280,14018,17847,2492
,7569,5102,10502,471,1602,3011,1791,11409,13623,8086,1574,6518
,198,4493,14272,13994,15354,4476,18710,10661,14588,19297,7730,15477
,3599,4591,5193,5175,2759,722,12170,15790,16888,18910,3267,18080
,3515,15820,16019,2302,10155,7543,4730,10926,4047,870,6047,16851
,2163,1213,2282,8825,16269,19348,12460,16986,16518,15818,5537,17930
,13377,5642,3191,8736,6315,17820,4525,405,6172,17616,10128,11565
,12885,3063,2469,6301,17308,1923,2321,6860,16305,5743,4058,10767
,13043,372,2894,13019,9266,7950,2074,4433,8958,5700,7599,401
,13003,11429,16833,2536,10814,11246,11818,1654,11545,13091,2757,186
,14684,15537,4716,4552,14711,15172,540,1695,19258,8470,9263,9425
,8792,3225,5449,5781,6699,8345,16766,3496,9161,2451,534,5046
,14296,10204,2375,1692,6029,7800,10059,19225,10562,16501,4717,9243
,15265,3444,11216,10095,18544,16499,12446,7174,4768,5568,9552,15622
,16006,11210,11290,11017,18987,6608,11422,1004,11123,3065,1667,6662
,12848,13256,7457,1107,6311,16882,5929,9539,17742,19037,8371,10823
,9502,18169,16183,15467,14347,7287,2820,8690,17430,13067,1867,1789
,891,10692,5484,2238,12614,2371,5249,4501,5503,10615,685,12642
,10216,12884,12534,16458,18604,17141,1590,19362,19322,18878,2586,12412
,17020,14660,8466,8712,46,7163,9826,3633,15194,10679,6150,13689
,6993,10453,6656,9305,907,19360,8845,12395,5522,10897,11181,939
,7102,6474,18920,18322,247,11400,3644,16060,11171,17486,11475,8950
,3938,8036,5328,4740,16174,8262,7549,12772,5017,8998,10007,3344
,2551,14883,3831,5588,14409,7602,670,1794,4642,221,7666,17631
,9281,5310,15420,7536,4440,8923,10125,1874,11346,11846,18160,2024
,12774,19419,740,6688,4326,7257,18618,15085,16299,1016,1081,13534
,7479,14017,5707,2015,1190,11877,17938,18399,1726,5518,13646,16330
,4246,12313,15335,4625,12469,10911,15743,19159,7713,16210,5970,8291
,16959,2471,14373,9616,17093,16554,7938,9709,12330,5549,18906,6468
,8255,6292,3316,11756,9860,4242,301,13514,17015,3266,192,17364
,12967,11704,3570,7794,11245,6903,12903,17585,478,9509,2630,12293
,5982,15586,8534,6349,8069,2127,18031,6553,18698,10213,3129,17710
,6265,16912,9216,6291,2836,2197,14761,726,19125,2290,13251,16278
,6704,11090,4598,8907,5479,18665,2752,9913,1098,18393,9679,12729
,959,10423,14687,7935,4163,698,9218,16072,4154,18999,2964,13284
,9401,3290,11143,11646,3684,6015,16593,4,19092,11145,13669,3222
,10597,6320,6200,1528,2791,12979,1668,5141,4204,1309,11168,1676
,3445,13900,16476,9053,17238,17706,11025,2003,9479,18771,8141,4411
,18394,6882,11551,6516,17115,2736,14520,10019,5954,7320,11229,11454
,16633,5912,14647,1820,4085,7891,163,6679,12802,13050,16321,14226
,5654,655,18543,10627,13237,19317,2570,12543,513,5000,15464,8190
,13025,6943,18498,4487,17848,3934,1371,2464,17068,160,8276,7834
,8973,4024,5595,617,17969,19186,17928,15484,4339,1395,17103,2265
,16083,4714,9952,5106,15376,7145,5886,13608,9043,374,18929,2009
,5936,18788,10940,13055,8882,17594,1127,9649,16769,16779,11338,3199
,13193,15042,8153,3130,8178,6095,16665,18716,12866,12880,18105,11822
,5736,9727,18640,9126,18631,11911,8620,19399,14502,3241,13781,11110
,5362,16967,10378,6290,9117,3371,2128,4872,16818,17953,9690,15347
,18673,11697,5430,7880,9693,10575,14247,10964,6926,8993,15004,11742
,14336,18566,10410,11248,3819,15826,6927,6036,16781,1263,14040,4059
,11563,668,6011,3729,15509,2529,3284,8716,3945,2933,347,2891
,11774,17306,8536,8544,7347,18576,7691,265,14769,16977,12643,4117
,1666,19167,6890,7090,4500,7882,10725,14731,13888,17453,1064,17982
,4344,15836,16216,17883,3255,5374,10375,14969,4659,8171,15649,13319
,1734,7416,3257,10962,2713,18131,14803,10432,7026,3407,7670,1022
,18717,3045,14238,375,4755,9191,16903,16453,8440,12877,13189,15744
,643,10497,8986,17420,5186,9259,3146,15019,7411,7570,13432,9741
,16627,7715,16705,18466,322,14531,2010,2000,1003,3086,1589,7085
,14903,13021,14601,6839,12618,13004,717,7563,2416,12574,4658,15506
,8305,10310,14246,16465,16929,10369,18643,12553,2778,16463,8046,3980
,5776,6352,8841,18189,2543,17550,10723,15127,13963,19383,2439,4385
,6740,18583,47,8063,747,7920,19210,18176,14245,12097,18766,8497
,3480,3109,13569,15438,17878,3134,9145,7226,14468,9084,2920,9089
,18923,18417,9495,7663,12458,3450,6651,12589,16837,14891,3414,16071
,12935,12307,16832,8916,2676,16124,7990,18198,16843,4106,8517,4692
,4087,1983,7436,11538,18392,12282,14224,2289,14830,3101,4934,11615
,1965,4866,13709,17831,8024,2963,9026,2584,3051,17727,1100,4156
,14375,11878,3948,2641,18078,4478,6925,10242,3956,12615,13535,4254
,11459,18211,6105,11124,12492,11690,3778,78,8613,8610,6918,9150
,4863,6249,10706,7888,185,18180,10782,18367,1678,16898,3677,4840
,17654,12491,5745,5749,1413,10016,19195,17685,3832,16358,5480,17791
,18778,6235,16482,12762,18683,2958,16380,1349,15929,15980,11617,3036
,7600,6,12780,4948,2537,8821,18205,8428,15222,17769,13914,934
,2142,8972,5483,584,18109,12948,13279,17401,2517,1600,11712,3925
,14469,13932,9653,11824,6783,2362,16947,12673,4602,7796,10265,2918
,11235,19209,5241,3497,5334,1949,3000,7271,897,17568,613,10462
,8061,16780,1341,9449,9508,1486,16676,6472,9930,1164,7431,15396
,19153,7546,1302,14412,14106,9523,342,13544,6027,3983,8568,10691
,15480,15204,13070,1698,4906,13578,9802,4300,17294,512,877,13795
,528,8765,15528,1707,14125,7181,16904,16432,1178,6464,18323,1944
,11011,16065,15923,14805,4655,7325,17650,11511,14183,18953,4604,13749
,10273,15887,3798,13339,3318,8434,5835,1208,12086,7758,17728,3135
,2510,13130,1972,15338,9567,19331,12715,5408,11653,4148,14655,12726
,7597,6477,15727,13069,4289,19314,8275,8516,12654,18593,18040,4286
,4461,16446,14113,6902,14016,15739,1277,8051,18943,16582,19173,17565
,2134,8382,16386,10800,17266,10804,16349,19128,3972,1389,14136,16434
,11917,8472,5203,5367,3556,2611,16325,17666,4217,14909,7020,6507
,3881,819,10033,6296,7699,16037,1795,11780,16366,40,16680,10347
,6938,14782,18681,5032,11941,11607,16968,9091,873,16607,17499,6322
,1798,12150,12095,6504,9625,10050,15377,2424,8295,6881,15831,5617
,3443,6636,10655,12264,11642,19198,12006,11389,2462,7616,8870,2966
,18197,15961,9183,10054,10220,16493,15726,12847,13168,4186,9308,1392
,5633,2189,2850,11768,5705,14443,16770,8608,696,14208,1300,5593
,11677,7698,2766,424,5149,4452,12058,508,4661,2972,8002,9531
,3771,16606,1259,13674,11667,7540,15297,890,5798,3575,9379,12986
,19060,14404,11391,2070,8112,1385,16926,9341,8189,2476,9736,17904
,1191,10003,11108,3713,18662,15245,13610,868,17493,8641,13294,6920
,9472,18963,11281,12240,1176,12318,17178,8324,1158,6886,16502,13213
,15893,18286,1152,4869,13803,7955,17091,3319,14876,17841,8848,485
,8297,8294,9006,16842,4081,8085,15515,16897,4652,3562,153,5474
,5070,11206,15344,15857,539,9820,10071,10950,17958,4744,6562,3541
,7045,8831,14708,2033,3374,10607,8930,1181,3262,1880,6215,6825
,5391,11053,1220,11547,15921,15793,12711,1700,14944,8880,18692,14215
,3604,16369,16711,19049,16594,10133,6692,18523,3610,17673,15167,9935
,11673,6196,1170,15576,14606,8274,13351,1394,4813,16829,6189,9924
,1520,18551,9855,2093,3754,17127,3539,16477,16850,17084,14348,6660
,7452,5113,12341,1760,16021,18945,14158,1188,7273,10028,4382,16089
,17895,18070,11655,7027,7069,7372,4638,6589,3326,272,445,5097
,2255,15798,7439,10289,1315,8621,10987,12190,3418,2509,18102,6285
,18478,8883,13116,14261,3400,9384,6305,11702,1721,5425,19309,8468
,9359,15569,16193,2903,9599,13278,8169,3261,5951,15735,9510,7247
,8264,6182,9857,13261,10716,8657,11732,13356,9568,3387,2467,2909
,13,13991,11007,13231,1825,17016,8260,925,17138,4567,7696,3054
,1073,11498,5255,8507,6533,10324,10644,4267,17865,10879,11803,15932
,13710,8156,9778,10840,18743,10835,9500,246,10613,2192,12503,6809
,11433,16233,9187,11472,3849,6211,5119,10341,10409,14124,15905,949
,9000,11267,18998,17165,2279,7260,2884,18933,13945,11172,12522,12957
,10172,10109,8343,7413,15733,8226,10354,11591,6712,9432,10018,6856
,5857,11002,9416,9078,4939,14401,10769,8538,17203,15708,4871,15603
,15084,9777,5176,8049,6332,4375,12090,13298,9716,6709,1350,3776
,9682,18021,13635,11418,18739,16254,6806,8493,16864,16786,8265,18753
,16342,2506,18552,315,15412,8739,7598,17924,10468,3178,2838,11597
,14721,523,1563,4860,9976,17492,11990,7074,13110,9251,3488,1452
,8935,18292,3877,13042,15413,2026,2520,9083,8662,13092,18026,285
,16562,13730,5614,7985,17092,6965,3540,6773,17530,1766,4471,15288
,10238,3518,2992,19070,11363,3075,13634,17129,17324,2067,10984,3484
,7016,3060,8325,6183,13153,4831,7625,4078,1041,18744,17195,3217
,8838,7652,5531,15141,15899,14119,11722,14143,16942,16506,4370,12521
,5098,12708,17112,3520,18175,9438,16964,14405,5541,7789,11924,9918
,9351,5635,19075,12138,19392,16137,6112,6657,18103,13692,13770,12594
,15547,11915,13617,16831,9583,17208,10069,8409,4445,16064,9265,17228
,8790,7537,11787,9372,3151,8213,7737,11274,9900,11552,1636,18124
,18260,9513,10405,370,3857,9910,15579,5221,2054,15674,7066,8567
,11009,188,6075,9209,3192,8937,5854,4200,15199,11910,18272,2080
,5657,11005,11355,16497,3137,1133,5024,9705,14358,15269,15241,9338
,12630,4695,18449,12804,8193,3532,10068,8388,16276,16659,3979,1980
,14362,11193,10605,9429,12180,4265,3795,3156,10956,19229,2421,9573
,13848,15892,12993,759,7237,1682,7151,7147,12734,15394]


data_test_bool = old_SaoBento.id_traj.isin(cv_index_9)
print(data_test_bool.shape)
data_train = old_SaoBento[np.logical_not(data_test_bool)]
#print(old_SaoBento.drop_duplicates(subset=['id_traj'], keep='first').shape)
traj_coord_train = data_train[["lons", "lats", "id_traj"]].values
#print(data_train.values)
cv_size = 10
nb_traj_class = labels_sao_bento.max()+1
#print(nb_traj_class)
id_traj_class_n = np.where(labels_sao_bento == 2)[0] #这里就是返回的最大类数在label中的下标,下标就是id_traj
print("id_traj_class_n")
print(id_traj_class_n)
print(np.isin(traj_coord_train[:, -1], id_traj_class_n).shape)
#print(id_traj_class_n)
#print(np.isin(traj_coord_train[:, -1], id_traj_class_n))
coord_tc = traj_coord_train[np.isin(traj_coord_train[:, -1], id_traj_class_n)][:,:-1]
print("traj_coord_train")

print(traj_coord_train[:10])

nc_bic = [-1, np.inf, []]
print(nc_bic)
print("coord_tc.shape")
print(coord_tc)

gmm = GMM(n_components=2, covariance_type="full", min_covar=10e-8)
gmm.fit(coord_tc)
bic = gmm.bic(coord_tc)
nc_bic = min([nc_bic, [2, bic, gmm]], key=lambda x: x[1])  # lambda x: x[1]  就是一个函数输入是x[1]，输出是x=x[1]
print("nc_bic:")
print(nc_bic)


#for i, cv_index_i in enumerate(cv_list_SaoBento):
#    print(str(i) + ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
#    print(str(cv_index_i) + "#########################################")

#x=[0,1,2,3,4,2,8,9]
#a=np.where(x > 2)[0]
#print(a)
'''
a=np.reshape(np.arange(20),(4,5))
print(np.where(a>8)[0])
之所以加[0],是由于np.where可以适用于一维以及多维数组，所以返回的是一个以相应维数确定位置的数组'''
'''
 7 >>>a=np.reshape(np.arange(20),(4,5))
 8 >>>a
 9 array([[ 0,  1,  2,  3,  4],
10        [ 5,  6,  7,  8,  9],
11        [10, 11, 12, 13, 14],
12        [15, 16, 17, 18, 19]])
13 >>>np.where(a>0)'''

#    ttime = time.asctime()
#    print("CV: %d/%d, " % (i, cv_size) + ttime)

#(2746, 5)
#(879,)
#color_dict_45 = pickle.load(open(DATA_DIR + "Paired_45.pkl", "rb"),  encoding='iso-8859-1')

